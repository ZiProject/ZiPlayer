const { YTSRPlugin } = require("../plugins/dist/YTSRPlugin");

/**
 * V√≠ d·ª• s·ª≠ d·ª•ng YTSRPlugin ƒë·ªÉ t√¨m ki·∫øm n√¢ng cao tr√™n YouTube
 *
 * Plugin n√†y cung c·∫•p c√°c t√≠nh nƒÉng t√¨m ki·∫øm n√¢ng cao m√† kh√¥ng c·∫ßn t·∫°o stream,
 * ch·ªâ tr·∫£ v·ªÅ metadata c·ªßa video, playlist v√† channel.
 */

async function demonstrateYTSRPlugin() {
	const plugin = new YTSRPlugin();

	console.log("üéµ YTSRPlugin Demo - T√¨m ki·∫øm n√¢ng cao YouTube\n");

	try {
		// 1. T√¨m ki·∫øm video c∆° b·∫£n
		console.log("1. T√¨m ki·∫øm video c∆° b·∫£n:");
		const basicSearch = await plugin.search("Never Gonna Give You Up", "user123");
		console.log(`   T√¨m th·∫•y ${basicSearch.tracks.length} video:`);
		basicSearch.tracks.slice(0, 3).forEach((track, index) => {
			console.log(`   ${index + 1}. ${track.title} - ${track.metadata?.author}`);
			console.log(`      URL: ${track.url}`);
			console.log(`      Th·ªùi l∆∞·ª£ng: ${Math.floor(track.duration / 60)}:${(track.duration % 60).toString().padStart(2, "0")}`);
		});
		console.log();

		// 2. T√¨m ki·∫øm v·ªõi t√πy ch·ªçn n√¢ng cao
		console.log("2. T√¨m ki·∫øm v·ªõi t√πy ch·ªçn n√¢ng cao:");
		const advancedSearch = await plugin.search("chill music", "user123", {
			limit: 5,
			duration: "medium", // 4-20 ph√∫t
			sortBy: "viewCount", // S·∫Øp x·∫øp theo l∆∞·ª£t xem
			uploadDate: "month", // Upload trong th√°ng qua
		});
		console.log(`   T√¨m th·∫•y ${advancedSearch.tracks.length} video v·ªõi filter n√¢ng cao:`);
		advancedSearch.tracks.forEach((track, index) => {
			console.log(`   ${index + 1}. ${track.title}`);
			console.log(`      T√°c gi·∫£: ${track.metadata?.author}`);
			console.log(`      L∆∞·ª£t xem: ${track.metadata?.views?.toLocaleString()}`);
		});
		console.log();

		// 3. T√¨m ki·∫øm playlist
		console.log("3. T√¨m ki·∫øm playlist:");
		const playlistSearch = await plugin.searchPlaylist("lofi hip hop", "user123", 3);
		console.log(`   T√¨m th·∫•y ${playlistSearch.tracks.length} playlist:`);
		playlistSearch.tracks.forEach((track, index) => {
			console.log(`   ${index + 1}. ${track.title}`);
			console.log(`      Channel: ${track.metadata?.author}`);
			console.log(`      S·ªë video: ${track.metadata?.videoCount}`);
			console.log(`      URL: ${track.url}`);
		});
		console.log();

		// 4. T√¨m ki·∫øm channel
		console.log("4. T√¨m ki·∫øm channel:");
		const channelSearch = await plugin.searchChannel("PewDiePie", "user123", 2);
		console.log(`   T√¨m th·∫•y ${channelSearch.tracks.length} channel:`);
		channelSearch.tracks.forEach((track, index) => {
			console.log(`   ${index + 1}. ${track.title}`);
			console.log(`      Subscribers: ${track.metadata?.subscriberCount}`);
			console.log(`      URL: ${track.url}`);
		});
		console.log();

		// 5. T√¨m ki·∫øm t·∫•t c·∫£ lo·∫°i
		console.log("5. T√¨m ki·∫øm t·∫•t c·∫£ lo·∫°i (video, playlist, channel):");
		const allSearch = await plugin.search("music", "user123", {
			type: "all",
			limit: 6,
		});
		console.log(`   T√¨m th·∫•y ${allSearch.tracks.length} k·∫øt qu·∫£ h·ªón h·ª£p:`);
		allSearch.tracks.forEach((track, index) => {
			const type = track.metadata?.type || "video";
			console.log(`   ${index + 1}. [${type.toUpperCase()}] ${track.title}`);
			if (type === "playlist") {
				console.log(`      Video count: ${track.metadata?.videoCount}`);
			} else if (type === "channel") {
				console.log(`      Subscribers: ${track.metadata?.subscriberCount}`);
			} else {
				console.log(`      T√°c gi·∫£: ${track.metadata?.author}`);
			}
		});
		console.log();

		// 6. X·ª≠ l√Ω URL YouTube tr·ª±c ti·∫øp
		console.log("6. X·ª≠ l√Ω URL YouTube tr·ª±c ti·∫øp:");
		const urlSearch = await plugin.search("https://www.youtube.com/watch?v=dQw4w9WgXcQ", "user123");
		if (urlSearch.tracks.length > 0) {
			const track = urlSearch.tracks[0];
			console.log(`   Video: ${track.title}`);
			console.log(`   T√°c gi·∫£: ${track.metadata?.author}`);
			console.log(`   Th·ªùi l∆∞·ª£ng: ${Math.floor(track.duration / 60)}:${(track.duration % 60).toString().padStart(2, "0")}`);
			console.log(`   L∆∞·ª£t xem: ${track.metadata?.views?.toLocaleString()}`);
		}
		console.log();

		// 7. L·∫•y video theo ID
		console.log("7. L·∫•y video theo ID:");
		const videoById = await plugin.getVideoById("dQw4w9WgXcQ", "user123");
		if (videoById) {
			console.log(`   Video: ${videoById.title}`);
			console.log(`   T√°c gi·∫£: ${videoById.metadata?.author}`);
			console.log(`   URL: ${videoById.url}`);
		}
		console.log();

		// 8. L·∫•y video li√™n quan
		console.log("8. L·∫•y video li√™n quan:");
		const relatedTracks = await plugin.getRelatedTracks("https://www.youtube.com/watch?v=dQw4w9WgXcQ", {
			limit: 3,
			offset: 0,
		});
		console.log(`   T√¨m th·∫•y ${relatedTracks.length} video li√™n quan:`);
		relatedTracks.forEach((track, index) => {
			console.log(`   ${index + 1}. ${track.title}`);
			console.log(`      T√°c gi·∫£: ${track.metadata?.author}`);
			console.log(`      URL: ${track.url}`);
		});
		console.log();

		// 9. Demo c√°c t√≠nh nƒÉng kh√¥ng ƒë∆∞·ª£c h·ªó tr·ª£
		console.log("9. C√°c t√≠nh nƒÉng kh√¥ng ƒë∆∞·ª£c h·ªó tr·ª£:");
		console.log("   ‚ùå Plugin n√†y KH√îNG h·ªó tr·ª£ streaming audio");
		console.log("   ‚ùå Plugin n√†y KH√îNG h·ªó tr·ª£ fallback streaming");
		console.log("   ‚úÖ Plugin n√†y CH·ªà d√†nh cho t√¨m ki·∫øm metadata");
		console.log();

		console.log("üéâ Demo ho√†n th√†nh! YTSRPlugin cung c·∫•p t√¨m ki·∫øm n√¢ng cao cho YouTube.");
	} catch (error) {
		console.error("‚ùå L·ªói trong qu√° tr√¨nh demo:", error.message);
	}
}

// Ch·∫°y demo n·∫øu file ƒë∆∞·ª£c th·ª±c thi tr·ª±c ti·∫øp
if (require.main === module) {
	demonstrateYTSRPlugin().catch(console.error);
}

module.exports = { demonstrateYTSRPlugin };
