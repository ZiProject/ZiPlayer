/**
 * Example usage c·ªßa API Documentation Generator
 *
 * File n√†y demo c√°ch s·ª≠ d·ª•ng h·ªá th·ªëng t·ª± ƒë·ªông sinh API documentation
 */

const ApiDocsBuilder = require("./buildApiDocs");
const JSDocAdder = require("./addJSDocComments");
const ApiContentGenerator = require("./generateApiContent");

async function exampleUsage() {
	console.log("üéØ Example Usage c·ªßa API Documentation Generator\n");

	// 1. Th√™m JSDoc comments v√†o code
	console.log("1Ô∏è‚É£ Th√™m JSDoc comments v√†o code...");
	const jsdocAdder = new JSDocAdder();
	jsdocAdder.run();
	console.log("‚úÖ JSDoc comments ƒë√£ ƒë∆∞·ª£c th√™m v√†o code\n");

	// 2. Generate API content t·ª´ code
	console.log("2Ô∏è‚É£ Generate API content t·ª´ code...");
	const generator = new ApiContentGenerator();
	const generatedContent = generator.generate();
	console.log("‚úÖ Generated content:", Object.keys(generatedContent));
	console.log("");

	// 3. Build documentation ho√†n ch·ªânh
	console.log("3Ô∏è‚É£ Build documentation ho√†n ch·ªânh...");
	const builder = new ApiDocsBuilder();
	await builder.build();
	console.log("‚úÖ Documentation ƒë√£ ƒë∆∞·ª£c build th√†nh c√¥ng\n");

	// 4. Demo watch mode
	console.log("4Ô∏è‚É£ Demo watch mode (ch·∫°y 5 gi√¢y r·ªìi d·ª´ng)...");
	console.log("   - Thay ƒë·ªïi file trong core/, extension/, plugins/");
	console.log("   - Documentation s·∫Ω t·ª± ƒë·ªông rebuild");
	console.log("   - Nh·∫•n Ctrl+C ƒë·ªÉ d·ª´ng\n");

	// Ch·∫°y watch mode trong 5 gi√¢y
	const watchPromise = new Promise((resolve) => {
		const builder = new ApiDocsBuilder();
		builder.watch();

		// D·ª´ng sau 5 gi√¢y
		setTimeout(() => {
			console.log("\n‚è∞ Demo watch mode k·∫øt th√∫c");
			resolve();
		}, 5000);
	});

	await watchPromise;
}

// Ch·∫°y example
if (require.main === module) {
	exampleUsage().catch(console.error);
}

module.exports = { exampleUsage };
